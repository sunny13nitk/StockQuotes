package scriptsengine.portfolio.services.interfaces;

import java.util.ArrayList;
import java.util.Date;

import scriptsengine.enums.SCEenums;
import scriptsengine.portfolio.definitions.TY_DematData;
import scriptsengine.portfolio.definitions.TY_PosSS;
import scriptsengine.portfolio.definitions.TY_ScripBuy;
import scriptsengine.portfolio.definitions.TY_ScripBuySummary;
import scriptsengine.portfolio.definitions.TY_Scrip_PositionModel;
import scriptsengine.portfolio.pojos.OB_Positions_Header;
import scriptsengine.simulations.sell.definitions.TY_Sell_Proposal;
import scriptsengine.simulations.sell.definitions.TY_Sell_Quote;
import scriptsengine.uploadengine.exceptions.EX_General;

/**
 * 
 * Portfolio Manager INterface for Session Scoped Portfolio Manager Bean
 */
public interface IPortfolioManager
{
	public ArrayList<TY_DematData> getMyDematACs() throws EX_General;

	public ArrayList<TY_Scrip_PositionModel> getScripPositions() throws EX_General;

	/**
	 * ----------------------------------------------------------------------------------------------------------------
	 * Load My Portfolio - i.e. Set up my Demat Accounts according to my session's UserManager which will be implicitly
	 * taken care by Acccounts Query since Accounts object is User Dependant - Do this only if Demat Ac's is initial in
	 * the Potfolio Manager
	 * 
	 * @throws EX_General
	 *              * -------------------------------------------------------------------------------------------
	 */
	public void loadMyPortfolio() throws EX_General;

	/**
	 * -------------------------Get positions model for a Particular Scrip
	 * 
	 * @param scCode
	 *             - Scrip Code
	 * @return - Scrip Positions Model
	 * @throws EX_General
	 *              ----------------------------------------------------------------
	 */
	public TY_Scrip_PositionModel getPositionsModelforScrip(String scCode) throws EX_General;

	/**
	 * -------------------------Get positions header for a Particular Scrip
	 * 
	 * @param scCode
	 *             - Scrip Code
	 * @return - Scrip Positions Header
	 * @throws EX_General
	 *              ----------------------------------------------------------------
	 */
	public OB_Positions_Header getPositionsHeaderforScrip(String scCode) throws EX_General;

	/**
	 * --------------------- Purchase Scrip ---------------------------------------
	 * 
	 * @param scripPurchaseDetails
	 *             - Scrip Purchase Container
	 * @param simulate
	 *             - Boolean with Value true if only simulation is desired
	 * @throws EX_General
	 *              - Exception
	 *              ---------------------------------------------------------------------
	 */
	public TY_ScripBuySummary buyScrip(TY_ScripBuy scripPurchaseDetails, Boolean simulate) throws EX_General;

	/**
	 * Validate DEmat Account from Current Demat AC for the User--------------
	 * 
	 * @param dematAC
	 *             - demat AC to Validate
	 * @return - true if Account is valid for the User, else False
	 *         ----------------------------------------------------------------------
	 */
	public boolean validateDematAC(String dematAC);

	/**
	 * ------------------------- Sell Scrip by Quote -------------------------
	 * 
	 * @param sellQuote
	 *             - Sell Quote PoJO
	 * @param sellMode
	 *             - Sell Mode
	 * @return - Sell Proposal for REndering and analysis
	 * @throws EX_General
	 *              --------------------------------------------------------
	 * @throws Exception
	 */
	public TY_Sell_Proposal sellScrip(TY_Sell_Quote sellQuote, SCEenums.scripSellMode sellMode) throws Exception;

	/**
	 * ------------------------------ SellScrip by Already generated Proposal -------------
	 * 
	 * @param proposal
	 *             - Sell Proposal generated by System
	 * @param sellMode
	 *             - SEll Mode
	 * @throws EX_General
	 *              ----------------------------------------------------------------------------------
	 * @throws Exception
	 */
	public void sellScrip(TY_Sell_Proposal proposal, SCEenums.scripSellMode sellMode) throws Exception;

	public double getTotalPortfolioValue() throws Exception;

	public double getScripContributiontoPortfolio(String scCode) throws Exception;

	public double getSectorContributiontoPortfoliobyScCode(String scCode) throws Exception;

	public double getSectorContributiontoPortfolio(String sector) throws Exception;

	public double getContributiontoPortfoliobyAmount(double Amount) throws Exception;

	public TY_PosSS getScripPosSnapshot(String scCode) throws Exception;

	public void processDividendforScrip(String scCode, Date date, double DPS) throws EX_General;

	public void processDividendforScripDesc(String scDesc, Date date, double DPS) throws EX_General, Exception;

}
