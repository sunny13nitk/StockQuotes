package root.busslogic.aspects;

import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import root.busslogic.Services.interfaces.IFundLineSrv;
import root.busslogic.annotations.FundLineBalance;
import root.busslogic.utilities.UtilAnnotation;

@Aspect
@Component
public class FundLineBalanceAspect
{
	
	@Autowired
	private IFundLineSrv fundLineSrv;;
	
	/*
	 * ADVICE- Around Advice on FundLine Balance Annotation Marked Methods -- that would influence the Balance in the
	 * specific Fund Line - Around coz in Pre- need to check for -ve balances and be ready with updated balance as per
	 * txn. type - in Post - update fund line balance after successful execution using Fund Line Service
	 */
	@Around(
	    "onFundLineBalanceAnnotation()"
	)
	public void updateFundLineBalance(
	        ProceedingJoinPoint pjp
	) throws Throwable
	{
		// Get the Annotation Origin
		FundLineBalance flbAnn = (FundLineBalance) UtilAnnotation.getAnnotationforObjbyAnnType(pjp,
		        FundLineBalance.class);
		if (flbAnn != null)
		{
			switch (flbAnn.origin())
			{
				case FundLine:
					
			}
			
		}
		
		// Based on Annotation Origin Scan for expected PJP Args & take Action
	}
	
	/*
	 * POINTCUt Expressions
	 */
	@Pointcut(
	    "@Annotation(root.busslogic.annotations.FundLineBalance)"
	)
	public void onFundLineBalanceAnnotation(
	)
	{
		
	}
	
	// PRIVATE ROUTINES
	@SuppressWarnings(
	    "unused"
	)
	private Annotation getAnnotationforObjbyAnnType(
	        Object obj, final Class<? extends Annotation> annotation
	)
	{
		Annotation ann = null;
		
		if (obj != null)
		{
			
			Class<?> klass = obj.getClass();
			
			final ArrayList<Method> allMethods = new ArrayList<Method>(Arrays.asList(klass.getDeclaredMethods()));
			for (final Method method : allMethods)
			{
				if (method.isAnnotationPresent(annotation))
				{
					ann = method.getAnnotation(annotation);
					// TODO process annotInstance
					// methods.add(method);
				}
			}
			
		}
		
		return ann;
	}
	
}
